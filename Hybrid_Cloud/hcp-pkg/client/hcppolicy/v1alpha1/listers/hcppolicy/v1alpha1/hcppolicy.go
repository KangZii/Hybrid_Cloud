/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/KETI-Hybrid/hcp-pkg/apis/hcppolicy/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HCPPolicyLister helps list HCPPolicies.
// All objects returned here must be treated as read-only.
type HCPPolicyLister interface {
	// List lists all HCPPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HCPPolicy, err error)
	// HCPPolicies returns an object that can list and get HCPPolicies.
	HCPPolicies(namespace string) HCPPolicyNamespaceLister
	HCPPolicyListerExpansion
}

// hCPPolicyLister implements the HCPPolicyLister interface.
type hCPPolicyLister struct {
	indexer cache.Indexer
}

// NewHCPPolicyLister returns a new HCPPolicyLister.
func NewHCPPolicyLister(indexer cache.Indexer) HCPPolicyLister {
	return &hCPPolicyLister{indexer: indexer}
}

// List lists all HCPPolicies in the indexer.
func (s *hCPPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.HCPPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HCPPolicy))
	})
	return ret, err
}

// HCPPolicies returns an object that can list and get HCPPolicies.
func (s *hCPPolicyLister) HCPPolicies(namespace string) HCPPolicyNamespaceLister {
	return hCPPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HCPPolicyNamespaceLister helps list and get HCPPolicies.
// All objects returned here must be treated as read-only.
type HCPPolicyNamespaceLister interface {
	// List lists all HCPPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HCPPolicy, err error)
	// Get retrieves the HCPPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HCPPolicy, error)
	HCPPolicyNamespaceListerExpansion
}

// hCPPolicyNamespaceLister implements the HCPPolicyNamespaceLister
// interface.
type hCPPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HCPPolicies in the indexer for a given namespace.
func (s hCPPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HCPPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HCPPolicy))
	})
	return ret, err
}

// Get retrieves the HCPPolicy from the indexer for a given namespace and name.
func (s hCPPolicyNamespaceLister) Get(name string) (*v1alpha1.HCPPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hcppolicy"), name)
	}
	return obj.(*v1alpha1.HCPPolicy), nil
}
