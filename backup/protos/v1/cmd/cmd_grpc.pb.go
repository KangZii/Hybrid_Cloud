// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cmd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdClient is the client API for Cmd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdClient interface {
	ListAddon(ctx context.Context, in *ListAddonRequest, opts ...grpc.CallOption) (*ListAddonResponse, error)
}

type cmdClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdClient(cc grpc.ClientConnInterface) CmdClient {
	return &cmdClient{cc}
}

func (c *cmdClient) ListAddon(ctx context.Context, in *ListAddonRequest, opts ...grpc.CallOption) (*ListAddonResponse, error) {
	out := new(ListAddonResponse)
	err := c.cc.Invoke(ctx, "/v1.cmd.Cmd/ListAddon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdServer is the server API for Cmd service.
// All implementations must embed UnimplementedCmdServer
// for forward compatibility
type CmdServer interface {
	ListAddon(context.Context, *ListAddonRequest) (*ListAddonResponse, error)
	mustEmbedUnimplementedCmdServer()
}

// UnimplementedCmdServer must be embedded to have forward compatible implementations.
type UnimplementedCmdServer struct {
}

func (UnimplementedCmdServer) ListAddon(context.Context, *ListAddonRequest) (*ListAddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddon not implemented")
}
func (UnimplementedCmdServer) mustEmbedUnimplementedCmdServer() {}

// UnsafeCmdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdServer will
// result in compilation errors.
type UnsafeCmdServer interface {
	mustEmbedUnimplementedCmdServer()
}

func RegisterCmdServer(s grpc.ServiceRegistrar, srv CmdServer) {
	s.RegisterService(&Cmd_ServiceDesc, srv)
}

func _Cmd_ListAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdServer).ListAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.cmd.Cmd/ListAddon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdServer).ListAddon(ctx, req.(*ListAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cmd_ServiceDesc is the grpc.ServiceDesc for Cmd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cmd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.cmd.Cmd",
	HandlerType: (*CmdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAddon",
			Handler:    _Cmd_ListAddon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/cmd/cmd.proto",
}
